export declare class ViewProvider {
    opts: any;
    jm: any;
    layout: any;
    container: any;
    ePanel: any;
    eNodes: any;
    eCanvas: any;
    canvasCtx: any;
    size: {
        w: number;
        h: number;
    };
    selectedNode: any;
    selectedOptions: any;
    editingNode: any;
    previousNode: any;
    eEditor: any;
    eSelect: any;
    currentSelect: any;
    actualZoom: any;
    zoomStep: any;
    minZoom: any;
    maxZoom: any;
    constructor(jm: any, options: any);
    static get_select_option(value: any): any;
    init(): void;
    initView(): void;
    initSelect(): void;
    initEditor(): void;
    addEventToCanvas(): void;
    addEventToEditor(editor: any): void;
    addEventToSelect(select: any): void;
    getIsInteractSelectedValue(value: any): boolean;
    addEvent(obj: any, event_name: any, event_handle: any): void;
    getBindedNodeId(element: any): any;
    isExpander(element: any): boolean;
    reset(): void;
    resetTheme(): void;
    resetCustomStyle(): void;
    load(): void;
    expandSize(): void;
    initNodesSize(node: any): void;
    initNodes(): void;
    addNode(node: any): void;
    createNodeElement(node: any, parent_node: any): void;
    removeNode(node: any): void;
    updateNode(node: any): void;
    selectNode(node: any): void;
    selectClear(): void;
    getEditingNode(): any;
    isEditing(): boolean;
    createSelectByTypes(types: any): any;
    editNodeBegin(node: any, types: any): void;
    editNodeEnd(value?: any): void;
    getViewOffset(): {
        x: number;
        y: number;
    };
    resize(): void;
    _show(): void;
    zoomIn(): boolean;
    zoomOut(): boolean;
    setZoom(zoom: any): boolean;
    _centerRoot(): void;
    show(keep_center: any): void;
    relayout(): void;
    saveLocation(node: any): void;
    restoreLocation(node: any): void;
    clearNodes(): void;
    showNodes(): void;
    resetNodeCustomStyle(node: any): void;
    _resetNodeCustomStyle(node_element: any, node_data: any): void;
    clearNodeCustomStyle(node: any): void;
    clearLines(canvas_ctx?: any): void;
    showLines(canvas_ctx?: any): void;
    drawLine(pin: any, pout: any, offset: any, canvas_ctx: any): void;
}
